name: Security Scanning

# Comprehensive security scanning workflow
# Runs on every push, PR, and scheduled basis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dependencies
          - secrets
          - container

env:
  NODE_VERSION: '20.x'

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == ''

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ESLint Security Analysis
      - name: Run ESLint Security Analysis
        run: |
          npm run lint -- --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      # Semgrep SAST Analysis
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
            p/javascript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript-typescript'

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # NPM Audit
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: npm-audit-results.json
          retention-days: 30

      # Snyk Security Scan
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json
          retention-days: 30

      # OSSAR (Open Source Static Analysis Runner)
      - name: Run OSSAR
        uses: github/ossar-action@v1
        id: ossar

      - name: Upload OSSAR results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}

  # Secret Detection
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TruffleHog Secret Scanning
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      # GitLeaks Secret Detection
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # Custom secret patterns
      - name: Check for custom secret patterns
        run: |
          echo "Checking for custom secret patterns..."

          # Check for common secret patterns
          if grep -r -E "(password|passwd|pwd)\s*=\s*['\"][^'\"]{8,}" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . ; then
            echo "❌ Potential hardcoded passwords found"
            exit 1
          fi

          if grep -r -E "(api[_-]?key|apikey)\s*=\s*['\"][^'\"]{16,}" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . ; then
            echo "❌ Potential hardcoded API keys found"
            exit 1
          fi

          if grep -r -E "(secret|token)\s*=\s*['\"][^'\"]{20,}" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . ; then
            echo "❌ Potential hardcoded secrets/tokens found"
            exit 1
          fi

          echo "✅ No obvious hardcoded secrets found"

  # Container Security Scanning (if using Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        run: |
          docker build -t synapses-security-scan:latest .

      - name: Run Trivy vulnerability scanner
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'synapses-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, secret-scan, container-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate Security Summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          if [ "${{ needs.sast-scan.result }}" == "success" ]; then
            echo "✅ **SAST Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **SAST Analysis**: Failed or Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "✅ **Dependency Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Scan**: Failed or Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ **Secret Detection**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Secret Detection**: Failed or Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.container-scan.result }}" == "success" ]; then
            echo "✅ **Container Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Container Scan**: Failed or Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Address high and critical vulnerabilities immediately" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "4. Ensure no secrets are committed to the repository" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      # Notify on security issues (customize as needed)
      - name: Notify on Critical Issues
        if: needs.sast-scan.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.secret-scan.result == 'failure'
        run: |
          echo "🚨 Critical security issues detected!"
          echo "Please review the security scan results and address any findings."
          # Add notification logic here (Slack, email, etc.)
